<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FoodConnect - Reduce Food Waste</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }

        .header {
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            text-decoration: none;
        }

        .logo svg {
            width: 32px;
            height: 32px;
            margin-right: 0.5rem;
            fill: #4caf50;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: #4caf50;
            color: white;
        }

        .btn-primary:hover {
            background-color: #45a049;
        }

        .btn-secondary {
            background-color: transparent;
            color: #333;
            border: 1px solid #ddd;
        }

        .btn-secondary:hover {
            background-color: #f5f5f5;
        }

        .hero {
            background: linear-gradient(rgba(240, 247, 232, 0.8), rgba(255, 255, 255, 0.9));
            padding: 4rem 2rem;
            text-align: center;
            min-height: 500px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
        }

        .tagline {
            background-color: #e8f5e9;
            color: #2e7d32;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            display: inline-block;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .hero h1 {
            font-size: 3rem;
            line-height: 1.2;
            margin-bottom: 1rem;
        }

        .hero .highlight {
            color: #4caf50;
        }

        .hero p {
            font-size: 1.25rem;
            color: #666;
            margin-bottom: 2rem;
        }

        .hero-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .foods-section {
            max-width: 1200px;
            margin: 3rem auto;
            padding: 0 2rem;
        }

        .section-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .section-header h2 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .section-header p {
            color: #666;
            font-size: 1.1rem;
        }

        .food-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
        }

        .food-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            transition: transform 0.2s, box-shadow 0.2s;
            cursor: pointer;
        }

        .food-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 12px rgba(0,0,0,0.1);
        }

        .food-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            position: relative;
        }

        .food-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: #4caf50;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .food-details {
            padding: 1.5rem;
        }

        .food-category {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .food-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }

        .food-description {
            color: #666;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        .food-meta {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #666;
            font-size: 0.9rem;
        }

        .meta-item svg {
            width: 16px;
            height: 16px;
            fill: #666;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 200;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            position: relative;
        }

        .close-btn {
            position: absolute;
            right: 1rem;
            top: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .modal h2 {
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .location-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .location-btn:hover {
            background-color: #1976D2;
        }

        .notification {
            position: fixed;
            top: 2rem;
            right: 2rem;
            background: #4caf50;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: none;
            z-index: 300;
        }

        .notification.error {
            background: #f44336;
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .hero h1 {
                font-size: 2rem;
            }
            
            .hero p {
                font-size: 1rem;
            }
            
            .hero-buttons {
                flex-direction: column;
                width: 100%;
                max-width: 300px;
                margin: 0 auto;
            }
            
            .food-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <header class="header">
        <nav class="nav">
            <a href="/" class="logo">
                <svg viewBox="0 0 24 24">
                    <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8m3-5.5L12 7.58 9 14.5l3-1.5z"/>
                </svg>
                FoodConnect
            </a>
            <div class="nav-links">
                <a href="#browse">Browse Foods</a>
                <a href="#about">About Us</a>
                <a href="#how">How It Works</a>
            </div>
            <div class="nav-buttons">
                <button class="btn btn-secondary" onclick="showSignInModal()">Sign In</button>
                <button class="btn btn-primary">Join Now</button>
            </div>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="hero">
        <div class="hero-content">
            <div class="tagline">Reduce Food Waste in Singapore</div>
            <h1>Connect Surplus Food with <span class="highlight">Hungry People</span></h1>
            <p>FoodConnect helps event organizers quickly redistribute surplus food to nearby users, reducing waste and feeding communities.</p>
            <div class="hero-buttons">
                <button class="btn btn-primary" onclick="showPostFoodModal()">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
                        <path d="M12 2v10l4.5-4.5 1.42 1.42L12 14.84 6.08 8.92l1.42-1.42L12 12V2m0 14c3.31 0 6 2.69 6 6v2H6v-2c0-3.31 2.69-6 6-6z"/>
                    </svg>
                    Post Surplus Food
                </button>
                <button class="btn btn-secondary" onclick="findNearbyFood()">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="#333">
                        <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z"/>
                    </svg>
                    Find Available Food
                </button>
            </div>
        </div>
    </section>

    <!-- Available Food Section -->
    <section class="foods-section" id="browse">
        <div class="section-header">
            <h2>Available Food Right Now</h2>
            <p>Check out these recently posted surplus food items</p>
        </div>
        <div class="food-grid" id="foodGrid">
            <!-- Food items will be dynamically loaded here -->
        </div>
    </section>

    <!-- Post Food Modal -->
    <div id="postFoodModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('postFoodModal')">&times;</span>
            <h2>Post Surplus Food</h2>
            <form id="postFoodForm">
                <div class="form-group">
                    <label>Food Title</label>
                    <input type="text" id="foodTitle" required>
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <select id="foodCategory" required>
                        <option value="">Select Category</option>
                        <option value="Buffet">Buffet</option>
                        <option value="Desserts">Desserts</option>
                        <option value="Sandwiches">Sandwiches</option>
                        <option value="Beverages">Beverages</option>
                        <option value="Appetizers">Appetizers</option>
                        <option value="Main Course">Main Course</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="foodDescription" required></textarea>
                </div>
                <div class="form-group">
                    <label>Cuisine Type</label>
                    <input type="text" id="cuisineType" placeholder="e.g., Indian, Chinese, Western">
                </div>
                <div class="form-group">
                    <label>Estimated Servings</label>
                    <input type="number" id="servings" min="1" required>
                </div>
                <div class="form-group">
                    <label>Best Before (Time)</label>
                    <input type="datetime-local" id="bestBefore" required>
                </div>
                <div class="form-group">
                    <label>Pickup Location</label>
                    <input type="text" id="pickupLocation" placeholder="Enter address" required>
                    <button type="button" class="location-btn" onclick="getCurrentLocation()">Use Current Location</button>
                </div>
                <div class="form-group">
                    <label>Image URL (optional)</label>
                    <input type="url" id="imageUrl" placeholder="https://example.com/image.jpg">
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">Post Food</button>
            </form>
        </div>
    </div>

    <!-- Success/Error Notification -->
    <div id="notification" class="notification"></div>

    <script>
        // API configuration
        const API_URL = window.location.hostname === 'localhost' 
            ? 'http://localhost:3000/api' 
            : 'https://your-app-name.onrender.com/api';

        // Show notification
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Modal functions
        function showPostFoodModal() {
            document.getElementById('postFoodModal').style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Get current location
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const { latitude, longitude } = position.coords;
                    
                    // Reverse geocode to get address
                    try {
                        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`);
                        const data = await response.json();
                        
                        document.getElementById('pickupLocation').value = data.display_name;
                        
                        // Store coordinates for later use
                        document.getElementById('pickupLocation').dataset.lat = latitude;
                        document.getElementById('pickupLocation').dataset.lng = longitude;
                        
                        showNotification('Location retrieved successfully');
                    } catch (error) {
                        showNotification('Error getting address', 'error');
                    }
                }, (error) => {
                    showNotification('Error getting location: ' + error.message, 'error');
                });
            } else {
                showNotification('Geolocation is not supported by your browser', 'error');
            }
        }

        // Find nearby food
        async function findNearbyFood() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const { latitude, longitude } = position.coords;
                    
                    try {
                        const response = await fetch(`${API_URL}/foods/nearby?lat=${latitude}&lng=${longitude}`);
                        const foods = await response.json();
                        
                        displayFoods(foods);
                        showNotification(`Found ${foods.length} food items near you`);
                    } catch (error) {
                        showNotification('Error finding nearby food', 'error');
                    }
                }, (error) => {
                    showNotification('Please enable location to find nearby food', 'error');
                });
            }
        }

        // Load all foods
        async function loadFoods() {
            try {
                const response = await fetch(`${API_URL}/foods`);
                const foods = await response.json();
                displayFoods(foods);
            } catch (error) {
                console.error('Error loading foods:', error);
                // For demo purposes, show mock data if API fails
                displayMockFoods();
            }
        }

        // Display foods in grid
        function displayFoods(foods) {
            const foodGrid = document.getElementById('foodGrid');
            foodGrid.innerHTML = foods.map(food => createFoodCard(food)).join('');
        }

        // Create food card HTML
        function createFoodCard(food) {
            const isNew = new Date() - new Date(food.created_at) < 24 * 60 * 60 * 1000;
            
            return `
                <div class="food-card" onclick="showFoodDetails('${food.id}')">
                    <div style="position: relative;">
                        <img src="${food.image_url || '/api/placeholder/400/200'}" alt="${food.title}" class="food-image">
                        ${isNew ? '<span class="food-badge">New</span>' : ''}
                    </div>
                    <div class="food-details">
                        <div class="food-category">${food.category}</div>
                        <h3 class="food-title">${food.title}</h3>
                        <p class="food-description">${food.description.substring(0, 100)}...</p>
                        <div class="food-meta">
                            <div class="meta-item">
                                <svg viewBox="0 0 24 24">
                                    <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                                </svg>
                                ${food.location}
                            </div>
                            <div class="meta-item">
                                <svg viewBox="0 0 24 24">
                                    <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2M17 13h-5V7h1.5v4.5H17V13z"/>
                                </svg>
                                Best before: ${new Date(food.best_before).toLocaleString()}
                            </div>
                            <div class="meta-item">
                                <svg viewBox="0 0 24 24">
                                    <path d="M12 2c5.5 0 10 4.5 10 10s-4.5 10-10 10S2 17.5 2 12 6.5 2 12 2m0 2c-1.9 0-3.6.6-4.9 1.7l2.8 2.8C10.6 8.2 11.3 8 12 8s1.4.2 2.1.5l2.8-2.8C15.6 4.6 13.9 4 12 4m0 4c-2.2 0-4 1.8-4 4s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4z"/>
                                </svg>
                                Serves approx. ${food.servings}
                            </div>
                        </div>
                        <button class="btn btn-primary" style="width: 100%;">Request Pickup</button>
                    </div>
                </div>
            `;
        }

        // Display mock foods for demo
        function displayMockFoods() {
            const mockFoods = [
                {
                    id: 1,
                    title: "Assorted Finger Sandwiches and Pastries",
                    category: "Sandwiches",
                    description: "Leftover catering from corporate event. Includes vegetarian options. All individually wrapped and fresh.",
                    location: "Raffles Place, Downtown Core",
                    best_before: new Date(Date.now() + 5 * 60 * 60 * 1000).toISOString(),
                    servings: 15,
                    created_at: new Date().toISOString(),
                    image_url: "/api/placeholder/400/200"
                },
                {
                    id: 2,
                    title: "Vegetarian Buffet Items - Indian Cuisine",
                    category: "Indian",
                    description: "Surplus food from wedding reception. Contains dal, vegetable curry, rice, and naan bread. Well maintained at proper temperature.",
                    location: "Little India",
                    best_before: new Date(Date.now() + 3 * 60 * 60 * 1000).toISOString(),
                    servings: 25,
                    created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                    image_url: "/api/placeholder/400/200"
                },
                {
                    id: 3,
                    title: "Gourmet Cheese Platter and Fruits",
                    category: "Appetizers",
                    description: "Untouched cheese board from networking event. Premium selection with crackers and fresh fruit.",
                    location: "Marina Bay Sands",
                    best_before: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString(),
                    servings: 10,
                    created_at: new Date().toISOString(),
                    image_url: "/api/placeholder/400/200"
                }
            ];
            
            displayFoods(mockFoods);
        }

        // Handle form submission
        document.getElementById('postFoodForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                title: document.getElementById('foodTitle').value,
                category: document.getElementById('foodCategory').value,
                description: document.getElementById('foodDescription').value,
                cuisine_type: document.getElementById('cuisineType').value,
                servings: parseInt(document.getElementById('servings').value),
                best_before: document.getElementById('bestBefore').value,
                location: document.getElementById('pickupLocation').value,
                image_url: document.getElementById('imageUrl').value || null,
                latitude: parseFloat(document.getElementById('pickupLocation').dataset.lat) || null,
                longitude: parseFloat(document.getElementById('pickupLocation').dataset.lng) || null
            };
            
            try {
                const response = await fetch(`${API_URL}/foods`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    showNotification('Food posted successfully!');
                    closeModal('postFoodModal');
                    loadFoods();
                    document.getElementById('postFoodForm').reset();
                } else {
                    showNotification('Error posting food', 'error');
                }
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        });

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', loadFoods);

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.className === 'modal') {
                event.target.style.display = 'none';
            }
        }
    </script>
</body>
</html>